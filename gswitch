#!/bin/sh

set -x

if [ "$(whoami)" != "root" ]; then
 echo "You need to be root."
 exit
fi

XORG_CONF_DIR="/etc/X11/xorg.conf.d"
if [ ! -d "${XORG_CONF_DIR}" ]; then
  mkdir -p "${XORG_CONF_DIR}"
fi

# HOST_GPU_VIDEO_BUS_ID="03:00.0"
# HOST_GPU_AUDIO_BUS_ID="03:00.1"
# GUEST_GPU_VIDEO_BUS_ID="01:00.0"
# GUEST_GPU_AUDIO_BUS_ID="01:00.1"

XORG_HOST_GPU_CONF="${XORG_CONF_DIR}/99-gswitch-host.conf"
XORG_GUEST_GPU_CONF="${XORG_CONF_DIR}/99-gswitch-guest.conf"

source /usr/share/gswitch/gswitch.conf

# Example: "0b:00.1" -> "11:0:1"
hex_bus_id_to_dec_id() {
  local hex_id=$1
  local dec_id hex_value
  for hex_value in $(echo "${hex_id}" | tr ':|\.' ' '); do
    local hex_value_upper=$(echo "${hex_value}" | tr '[:lower:]' '[:upper:]')
    local dec_value=$(echo "ibase=16; ${hex_value_upper}" | bc)
    if [ "${dec_id}" != "" ]; then
      dec_id="${dec_id}:"
    fi
    dec_id="${dec_id}${dec_value}"
  done
  echo $dec_id
}

has_xorg_confs_setup() {
  [[
    ((-f "$XORG_HOST_GPU_CONF") || (-f "$XORG_HOST_GPU_CONF.skip"))
    && ((-f "$XORG_GUEST_GPU_CONF") || (-f "$XORG_GUEST_GPU_CONF.skip"))
  ]]
  return
}

active_xorg_conf() {
  if [ -f "$XORG_HOST_GPU_CONF" ]; then
    echo "host"
  elif [ -f "$XORG_GUEST_GPU_CONF" ]; then
    echo "guest"
  else
    echo ""
  fi
}

switch_xorg_conf() {
  local target="$1" # "host" | "guest"
  if [ "$target" == "host" ]; then
    mv "${XORG_GUEST_GPU_CONF}" "${XORG_GUEST_GPU_CONF}.skip"
    mv "${XORG_HOST_GPU_CONF}.skip" "${XORG_HOST_GPU_CONF}"
  elif [ "$target" == "guest" ]; then
    mv "${XORG_HOST_GPU_CONF}" "${XORG_HOST_GPU_CONF}.skip"
    mv "${XORG_GUEST_GPU_CONF}.skip" "${XORG_GUEST_GPU_CONF}"
  fi
}

ask_reload() {
  QUESTION=$1
  echo "${QUESTION}"
  read -r ANSWER
  case "${ANSWER}" in
    Y|y|Yes|yes)
      RELOAD="true"
    ;;
    N|n|No|no)
      RELOAD="false"
    ;;
    *)
      echo "Unknown argument: ${ANSWER}."
      exit 1
    ;;
  esac
}

do_reload() {
  local target_gpu="$1" # "host" | "guest"
  ( trap '' HUP TERM
    while [ "$(systemctl status display-manager | awk '/Active:/{print$2}')" \
               = "active" ]; do
      sleep 1
    done
    # killall gdm-x-session
    # sleep 4
    if [ "${REMOVE}" = "true" ]; then
      for PATH_D in ${DEV_PATH}; do
        if [ -e "${PATH_D}" ]; then
          echo 1 > "${PATH_D}"
        fi
      done
    fi
    if [ "${target_gpu}" == "guest" ]; then
      bind_guest_gpu_driver
    else
      bind_guest_gpu_vfio_pci
    fi
    if [ "$(lspci -k | grep -c "${GUEST_GPU_DRIVER}")" -gt 0 ]; then
      modprobe "${GUEST_GPU_DRIVER}"
      if [ "${GUEST_GPU_DRIVER}" = "nvidia" ]; then
        modprobe nvidia_drm
      fi
    fi
    systemctl start display-manager.service ) &
  systemctl stop display-manager.service
  exit 0
}

switch_to_guest_gpu() {
  if [ "${GUEST_GPU_DRIVER}" != "nvidia" ]; then
    for HEX_ID in $(lspci | grep -i 'vga' | cut -f 1 -d ' '); do
      if [ "${DEC_ID}" = "${GUEST_GPU_VIDEO_BUS_ID}" ]; then
        break
      fi
    done
    DISP_PATH="/sys/bus/pci/devices/0000:${HEX_ID}/drm/card*/card*"
    DISP_STATUS=$(for DISP in ${DISP_PATH}; do find "${DISP}" -type f -name \
                  'status'; done)
    DISP_DISCON_NUM=$(printf '%s\n' "${DISP_STATUS}" | xargs \
                      grep -e '^disconnected$' | wc -l)
    DISP_TOTAL_NUM=$(printf '%s\n' "${DISP_STATUS}" | wc -l)
    if [ "${DISP_DISCON_NUM}" -eq "${DISP_TOTAL_NUM}" ] && \
       [ "${DISP_TOTAL_NUM}" -gt "0" ]; then
      echo "Warning: No eGPU attached display detected with open source drivers."
      echo "Internal mode and setting DRI_PRIME variable are recommended for this configuration."
      echo "Not setting eGPU mode."
      switch_to_host_gpu
      exit 0
    fi
  fi
  if [ "$(active_xorg_conf)" != "guest" ]; then
    switch_xorg_conf "guest"

    ask_reload "You are now set up. Would you like to reload? (Y/n)"
    if [ "${RELOAD}" = "true" ]; then
      do_reload "guest"
    else
      exit 0
    fi
  else
    ask_reload "You are already set up. Would you like to reload? (Y/n)"
    if [ "${RELOAD}" = "true" ]; then
      do_reload "guest"
    else
      exit 0
    fi
  fi
}

switch_to_host_gpu() {
  if [ "$(active_xorg_conf)" != "host" ]; then
    switch_xorg_conf "host"

    ask_reload "You are now set up. Would you like to reload? (Y/n)"
    if [ "${RELOAD}" = "true" ]; then
      do_reload "host"
    else
      exit 0
    fi
  else
    ask_reload "You are already set up. Would you like to reload? (Y/n)"
    if [ "${RELOAD}" = "true" ]; then
      do_reload "host"
    else
      exit 0
    fi
  fi
}

bind_guest_gpu_vfio_pci() {
  ####### Assume vtconsole & efi-framebuffer are already unbound TODO
  # Unbind VTconsoles
  echo 0 > /sys/class/vtconsole/vtcon0/bind
  echo 0 > /sys/class/vtconsole/vtcon1/bind

  # Unbind EFI-Framebuffer
  echo "efi-framebuffer.0" > /sys/bus/platform/drivers/efi-framebuffer/unbind

  local gpu_video_id="0000:$GUEST_GPU_VIDEO_BUS_ID"
  local gpu_audio_id="0000:$GUEST_GPU_AUDIO_BUS_ID"

  # GPU 1 unbind from nvidia
  echo "$gpu_video_id" > "/sys/bus/pci/devices/$gpu_video_id/driver/unbind"
  echo "$gpu_audio_id" > "/sys/bus/pci/devices/$gpu_audio_id/driver/unbind"

  # Load VFIO Kernel Module
  modprobe vfio
  modprobe vfio_iommu_type1
  modprobe vfio_pci

  # GPU 1 bind to vfio-pci
  echo "$gpu_video_id" > /sys/bus/pci/drivers/vfio-pci/bind
  echo "$gpu_audio_id" > /sys/bus/pci/drivers/vfio-pci/bind

  # Rebind vtconsole & efi-framebuffer
  # nvidia-xconfig --query-gpu-info > /dev/null 2>&1
  echo "efi-framebuffer.0" > /sys/bus/platform/drivers/efi-framebuffer/bind

  echo 1 > /sys/class/vtconsole/vtcon0/bind
  echo 1 > /sys/class/vtconsole/vtcon1/bind

  # nvidia-xconfig --query-gpu-info > /dev/null 2>&1 # TODO Maybe
}

bind_guest_gpu_driver() {
  # Unbind VTconsoles
  echo 0 > /sys/class/vtconsole/vtcon0/bind
  echo 0 > /sys/class/vtconsole/vtcon1/bind

  # Unbind EFI-Framebuffer
  echo "efi-framebuffer.0" > /sys/bus/platform/drivers/efi-framebuffer/unbind

  # Avoid race condition
  # sleep 4

  local gpu_video_id="0000:$GUEST_GPU_VIDEO_BUS_ID"
  local gpu_audio_id="0000:$GUEST_GPU_AUDIO_BUS_ID"

  # GPU 1 unbind from vfio-pci
  echo "$gpu_video_id" > "/sys/bus/pci/devices/$gpu_video_id/driver/unbind"
  echo "$gpu_audio_id" > "/sys/bus/pci/devices/$gpu_audio_id/driver/unbind"

  # GPU 1 bind to nvidia
  echo "$gpu_video_id" > /sys/bus/pci/drivers/nvidia/bind
  echo "$gpu_audio_id" > /sys/bus/pci/drivers/snd_hda_intel/bind

  # TODO Maybe?
  nvidia-xconfig --query-gpu-info > /dev/null 2>&1
  echo "efi-framebuffer.0" > /sys/bus/platform/drivers/efi-framebuffer/bind

  # Rebind VT consoles
  echo 1 > /sys/class/vtconsole/vtcon0/bind
  echo 1 > /sys/class/vtconsole/vtcon1/bind

  # nvidia-xconfig --query-gpu-info > /dev/null 2>&1

  # Unload vfio
  # modprobe -r vfio_pci
  # modprobe -r vfio_iommu_type1
  # modprobe -r vfio
}

case $1 in
  -h|help)
    echo "Valid arguments are \"guest\", \"host\", \"boot\", \"remove\" or \"setup\"."
    echo "Example: sudo gswitch guest"
    exit 0
  ;;
  host|guest)
    if ! has_xorg_confs_setup; then
      echo "GPU Xorg configs are missing, please run setup before use:"
      echo "# gswitch setup"
      exit 1
    fi
    case $1 in
      host)
        switch_to_host_gpu
      ;;
      guest)
        switch_to_guest_gpu
      ;;
    esac
  ;;
  boot)
    MODE="host"
    for HEX_ID in $(lspci | grep -i 'vga' | cut -f 1 -d ' '); do
      DEC_ID=""
      for HEX_VALUE in $(echo "${HEX_ID}" | tr ':|\.' ' '); do
        HEX_VALUE_UPPER=$(echo "${HEX_VALUE}" | tr '[:lower:]' '[:upper:]')
        DEC_VALUE=$(echo "ibase=16; ${HEX_VALUE_UPPER}" | bc)
        DEC_ID="${DEC_ID}:${DEC_VALUE}"
      done
      DEC_ID=$(echo "${DEC_ID}" | sed 's/^://')
      if [ "${DEC_ID}" = "${GUEST_GPU_BUS_ID}" ]; then
        MODE="guest"
        break
      fi
    done
    case ${MODE} in
      guest)
        # TODO
        if [ "${EGPU_SET}" = "true" ]; then
          echo "no" | switch_to_guest_gpu
        else
          echo "yes" | switch_to_guest_gpu
        fi
      ;;
      host)
        # TODO
        if [ "${EGPU_SET}" = "true" ]; then
          echo "yes" | switch_to_host_gpu
        else
          echo "no" | switch_to_host_gpu
        fi
      ;;
    esac
  ;;
  remove)
    BUS1D=$(echo "${GUEST_GPU_BUS_ID}" | cut -f 1 -d :)
    BUS2D=$(echo "${GUEST_GPU_BUS_ID}" | cut -f 2 -d :)
    BUS1H=$(printf "%02x" "${BUS1D}")
    BUS2H=$(printf "%02x" "${BUS2D}")
    HEX_DID="${BUS1H}:${BUS2H}."
    DEV_PATH="/sys/bus/pci/devices/[0-9a-f:]*${HEX_DID}[0-9]*/remove"
    # TODO
    echo "Try removing the GPU PCIe addresses? This will switch to internal and log you out. (Beta) (Y/n): "
    read -r REMOVE_ANSWER
    case "${REMOVE_ANSWER}" in
      Y|y|Yes|yes)
        REMOVE="true"
      ;;
      N|n|No|no)
        REMOVE="false"
      ;;
      *)
        echo "Unknown argument: ${REMOVE_ANSWER}."
        exit 1
      ;;
    esac
  echo "yes" | switch_to_host_gpu
  ;;
  setup)
    # TODO Validation of conf file being read from
    GPU_NAMES=("host" "guest")
    GPU_BUS_IDS=("${HOST_GPU_VIDEO_BUS_ID}" "${GUEST_GPU_VIDEO_BUS_ID}")
    GPU_DRIVERS=("${HOST_GPU_DRIVER}" "${GUEST_GPU_DRIVER}")
    # Assume default host gpu currently in use, set guest gpu conf to skip
    XORG_CONFS=("${XORG_HOST_GPU_CONF}" "${XORG_GUEST_GPU_CONF}.skip")
    for (( i=0; i < ${#GPU_NAMES[@]}; i++)); do
      GPU_NAME="${GPU_NAMES[$i]}"
      XORG_CONF="${XORG_CONFS[$i]}"
      GPU_BUS_ID="${GPU_BUS_IDS[$i]}"
      GPU_DRIVER="${GPU_DRIVERS[$i]}"

      DEC_ID="PCI:$(hex_bus_id_to_dec_id "${GPU_BUS_ID}")"
      cp /usr/share/gswitch/xorg.template.conf "${XORG_CONF}"
      sed -E -i "s/BusID.*$/BusID      \"${DEC_ID}\"/" "${XORG_CONF}"
      GPU_ID=$(lspci | grep -i "${HEX_ID}")
      sed -E -i "s/Driver.*$/Driver     \"${GPU_DRIVER}\"/" "${XORG_CONF}"
    done
    echo "Setup complete!"
    exit 0
  ;;
  *)
    echo "Unknown argument: ${1}."
    echo "Valid arguments are \"guest\", \"host\", \"boot\", \"remove\" or \"setup\"."
    echo "Example: sudo gswitch guest"
    exit 1
  ;;
esac
